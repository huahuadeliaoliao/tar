from typing import Any, List, Optional, Protocol

class Response(Protocol):
    status: int

class Locator(Protocol):
    def click(self, **kwargs: Any) -> None: ...
    def inner_text(self) -> str: ...
    def all_inner_texts(self) -> List[str]: ...
    def get_attribute(self, name: str) -> Optional[str]: ...
    def inner_html(self) -> str: ...
    def evaluate(self, script: str) -> Any: ...
    def count(self) -> int: ...
    def screenshot(self) -> bytes: ...

class Page(Protocol):
    url: str

    def goto(self, url: str, wait_until: Optional[str] = None, timeout: Optional[int] = None) -> Optional[Response]: ...
    def locator(self, selector: str) -> Locator: ...
    def fill(self, selector: str, value: str) -> None: ...
    def wait_for_selector(self, selector: str, state: Optional[str] = None) -> None: ...
    def wait_for_timeout(self, timeout: int) -> None: ...
    def screenshot(self, *, full_page: Optional[bool] = None) -> bytes: ...
    def title(self) -> str: ...
    def evaluate(self, expression: str) -> Any: ...

class BrowserContext(Protocol):
    def new_page(self) -> Page: ...
    def set_default_timeout(self, timeout: int) -> None: ...
    def set_default_navigation_timeout(self, timeout: int) -> None: ...
    def close(self) -> None: ...

class Browser(Protocol):
    def new_context(self, **kwargs: Any) -> BrowserContext: ...
    def close(self) -> None: ...

class PlaywrightSync(Protocol):
    class Chromium(Protocol):
        def launch(self, **kwargs: Any) -> Browser: ...

    chromium: Chromium

    def stop(self) -> None: ...

class SyncPlaywrightContextManager(Protocol):
    def __enter__(self) -> PlaywrightSync: ...
    def __exit__(self, exc_type: Any, exc: Any, tb: Any) -> None: ...
    def start(self) -> PlaywrightSync: ...

class Error(Exception): ...
class TimeoutError(Error): ...

def sync_playwright() -> SyncPlaywrightContextManager: ...
